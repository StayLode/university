/*
  Scrivere un programma in cui si dichiari un tipo struct studente,
  costituito da un campo nome, un campo cognome ed un campo numero di
  matricola. Si definiscano e si inizializzino quindi almeno due
  oggetti (variabili) di tipo struct studente e si memorizzino in
  forma binaria in un file. Si chiuda quindi il file, lo si riapra in
  lettura e se ne stampi il contenuto.

*/

#include <iostream>
#include <fstream>

using namespace std ;

const int MAX_LEN = 21 ;
struct studente{
	char nome[MAX_LEN];
	char cognome[MAX_LEN];
	int matricola;
};

int main()
{
 studente s1= {"Mario","Rossi",2345};
 studente s2= {"Dario","Bianchi",8488};

 //Creazione e apertura del file in scrittura contenente i record studente
 ofstream f1("Studenti.dat");
 if(!f1) {
 	cerr<<"Errore in creazione del file\n" ;
	return 1;
 }

 /*
   Scrittura sul file binario dei due record.
 */
 f1.write(reinterpret_cast<char *>(&s1), sizeof(studente));
 f1.write(reinterpret_cast<char *>(&s2), sizeof(studente));
 f1.close(); // per essere sicuro di scrivere nel file

 ifstream f2("Studenti.dat");
 if(!f2) {
 	cerr<<"Errore in apetura\n" ;
	return 2;
 }

 studente s3, s4 ;
 //leggiamo il contenuto del file
 f2.read(reinterpret_cast<char *>(&s3),sizeof(studente));
 f2.read(reinterpret_cast<char *>(&s4),sizeof(studente));

 /*Stampiamo su standard output il contenuto del file*/
 cout<<s3.matricola<<": "<<s3.nome<<" "<<s3.cognome<<endl ;
 cout<<s4.matricola<<": "<<s4.nome<<" "<<s4.cognome<<endl ;

 return 0;
}


#include <iostream>
#include <fstream>

using namespace std ;
//Vettore in un file binario, lo riprendo e sommo gli elementi

void scrivi_stampa(ostream &s, int* v, bool scrivi, int dim);

int main()
{
    int dim;
    ofstream f("Prova.dat");

    cout<<"Inserire la dimensione del vettore: ";
    cin>>dim;

    int *v = new int[dim];
    int *buf = new int[dim];
    
    for(int i=0;i<dim;i++)
        cin>>v[i];

    scrivi_stampa(f,v,1,dim);
    f.close();
    ifstream f2("Prova.dat");
    f2.read(reinterpret_cast<char*>(buf),sizeof(int)*dim);
    scrivi_stampa(cout, buf, 0,dim);

}

void scrivi_stampa(ostream &s, int* v, bool scrivi, int dim){
    if(scrivi){
      s.write(reinterpret_cast<char*>(v),sizeof(int)*dim);
    }
    else{
      int sum=0;
      for(int i=0;i<dim;i++){
        s<<v[i]<<" ";
        sum+=v[i];
      }
      s<<sum;
    }
    

}

ARRAY IN FILE BINARIO E TESTO
/*
  Programma di esempio da usare per creare due file, uno di testo
  e l'altro binario, che contengono un array di tre interi.

  */

#include <iostream>
#include <fstream>
using namespace std ;

int main()
{
	const int N = 3 ;
	int a[N] = {5, 18990, 1923412} ;
	// Apertura del file di testo in scrittura
	ofstream tf("dati.txt");
	if (!tf) {
		cerr<<"Errore in creazione del file\n" ;
		return 1;
	}
	for (int i = 0 ; i < N ; i++)
		tf<<a[i]<<" " ;
	// Apertura del file binario in scrittura
	ofstream bf("dati.dat");
	if (!bf) {
		cerr<<"Errore in creazione del file\n" ;
		return 1;
	}
	bf.write(reinterpret_cast<const char *>(a), sizeof(int) * N) ;
	return 0;
}


/*
* Scrivere un programma che utilizzi una funzione per
*   leggere da stdin un numero di valori di tipo int fornito a
* tempo di esecuzione del programma, ed inserisca tali
* valori in un array allocato dinamicamente dalla funzione
* stessa
*   La funzione deve restituire al main() l'indirizzo del primo
* elemento dell'array dinamico creato. Stampare poi
* l'array nel main()
*/
#include <iostream>

using namespace std ;

void creaVett(int * &p, int &dim){
    cout<<"Dimensione del vettore: ";
    cin>>dim;
    p=new int [dim];
    for(int i=0;i<dim;i++)
        cin>>p[i];
}

int main()
{
    int *a;
    int dim;
    creaVett(a, dim);
    cout<<"Vettore creato: ";
    for(int i=0;i<dim;i++)
        cout<<a[i]<<" ";
    cout<<endl;
}

ARRAY in file binario e testo con riapertura file

#include <iostream>
#include <fstream>

using namespace std ;

int main()
{
	const int N = 1 ;
	double a[N] ;
	
	// Apertura del file di testo in scrittura
	ofstream tf("dati.txt");
	if (!tf) {
		cerr<<"Errore in creazione del file\n" ;
		return 1;
	}

	cout<<"Inserire i valori dei "<<N<<" elementi:"<<endl ;
	for (int i = 0 ; i < N ; i++) {
		cin>>a[i] ;
		tf<<a[i]<<" " ;
	}

	// Apertura del file binario in scrittura
	ofstream bf("dati.dat");
	if (!bf) {
		cerr<<"Errore in creazione del file\n" ;
		return 1;
	}
	
	bf.write(reinterpret_cast<const char *>(a), sizeof(double) * N) ;

	// Chiusura dei file: garantisco l'avvenuta scrittura
	tf.close();
	bf.close();

	// Riapertura dei file in modalita' lettura
	ifstream f1("dati.dat") ;
	ifstream f2("dati.txt") ;
	if(!f1 || !f2)	{
		cerr<<"Errore in apertura file.\n" ;
		return 2;
	}

	cout<<"Contenuto file di testo: "<<endl ;
	double d ;
	while (f2>>d)
		cout<<d<<" " ;
	cout<<endl ;

	cout<<"Contenuto file binario: "<<endl ;
	double buf[N] ;
	f1.read(reinterpret_cast<char *>(buf), sizeof(double) * N) ;
	
	for (int i = 0 ; i < N ; i++)
		cout<<buf[i]<<" " ;
	cout<<endl ;

	return 0;
}


ARRAY CIRCOLARE

const int N = 10;
struct array_circolare_t {
           int vett[N] ;
           int primo, ultimo ;
           int num_elem ;
} ;
void inizializza(array_circolare_t &a)
{
          a.primo = a.ultimo = a.num_elem = 0;
}
main()
{
         array_circolare_t a ;
         inizializza(a) ;
         inserisci_in_fondo(a,3);

}

bool inserisci_in_fondo(array_circolare_t &a, int b){
           if (a.num_elem == N)
               return false ;
           a.ultimo = (a.ultimo + 1) % N ;
           a.vett[a.ultimo] = b ;
           a.num_elem++ ;
           return true ;
}